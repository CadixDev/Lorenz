buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'gradle.plugin.net.minecrell:licenser:0.3'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2'
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {
        apply plugin: 'signing'
    }
    apply plugin: 'net.minecrell.licenser'

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    group = 'me.jamiemansfield'
    archivesBaseName = project.name.toLowerCase()
    version = '0.4.0-SNAPSHOT'

    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        testCompile 'org.junit.jupiter:junit-jupiter-api:5.2.0'
        testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.2.0'
    }

    license {
        header = rootProject.file('HEADER.txt')
    }

    processResources {
        from 'LICENSE.txt'
    }

    task javadocJar(type: Jar, dependsOn: 'javadoc') {
        from javadoc.destinationDir
        classifier = 'javadoc'
    }

    task sourcesJar(type: Jar, dependsOn: 'classes') {
        from sourceSets.main.allSource
        classifier = 'sources'
    }

    artifacts {
        archives javadocJar
        archives sourcesJar
    }

    if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {
        signing {
            sign configurations.archives
        }
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                // repo.jamiemansfield.me
                if (System.getenv('MAVEN_RELEASES') != null && System.getenv('MAVEN_SNAPSHOTS') != null) {
                    repository(url: 'file://' + System.getenv('MAVEN_RELEASES'))
                    snapshotRepository(url: 'file://' + System.getenv('MAVEN_SNAPSHOTS'))
                }

                // Maven Central
                if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                    repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }

                    snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }
                }

                pom {
                    artifactId = project.archivesBaseName

                    project {
                        name = project.name
                        description = project.description
                        packaging = 'jar'
                        url = project.url
                        inceptionYear = project.inceptionYear

                        scm {
                            url = 'https://github.com/jamiemansfield/Lorenz'
                            connection = 'scm:git:https://github.com/jamiemansfield/Lorenz.git'
                            developerConnection = 'scm:git:git@github.com:jamiemansfield/Lorenz.git'
                        }

                        issueManagement {
                            system = 'GitHub'
                            url = 'https://github.com/jamiemansfield/Lorenz/issues'
                        }

                        licenses {
                            license {
                                name = 'MIT License'
                                url = 'https://opensource.org/licenses/MIT'
                                distribution = 'repo'
                            }
                        }

                        developers {
                            developer {
                                id = 'jamierocks'
                                name = 'Jamie Mansfield'
                                email = 'dev@jamierocks.uk'
                                url = 'https://www.jamiemansfield.me/'
                                timezone = 'Europe/London'
                            }
                        }
                    }
                }
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.1'
}
